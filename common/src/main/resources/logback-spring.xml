<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <contextName>common</contextName>

    <!-- property标签可用于自定义属性，比如定义一个，然后使用${pattern}去引用它 -->
    <!-- %d表示时间
         %thread表示线程名
         %-5level 表示日志级别，允许以五个字符长度输出
         %logger{50}表示具体的日志输出者，比如类名，括号内表示长度
         %msg表示具体的日志消息，就是logger.info("xxx")中的xxx
         %n表示换行
         %color(xxx)来指定对应列的输出颜色，可以实现控制台输出的颜色高亮。-->
    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n"/>
    <property name="pattern-color" value="%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %highlight(%-5level) %green(%logger{50}) - %highlight(%msg) %n"/>
    <property name="LOG_HOME" value="logs"/>

    <!-- 控制台输出 -->
    <!-- encoder表示输出格式，具体说明如下 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- 控制台输出-带颜色 -->
    <appender name="CONSOLE-WITH-COLOR" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern-color}</pattern>
        </encoder>
    </appender>

    <!-- 文件输出 -->
    <!-- 文件输出主要包括配置：以指定格式将日志输出到指定文件夹下的文件中，可以配置该文件的名称、最大大小、保存时间-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称格式被指定为logs/all.日期.索引号.log -->
            <fileNamePattern>${LOG_HOME}/all.%d.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大大小为10MB，超出则创建新文件-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留三十天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- root节点实际上是配置启用哪种appender，可以添加多个appender -->
    <!-- 表示level为info级别，启用渲染器CONSOLE-WITH-COLOR和FILE。-->
    <!-- 按照这样配置，输出日志时，控制台会按照CONSOLE定义的格式输出，而日志文件会按照CONSOLE-WITH-COLOR的配置去输出。-->
    <root level="INFO">
        <appender-ref ref="CONSOLE-WITH-COLOR"/>
        <appender-ref ref="FILE"/>
    </root>

    <!-- logger节点可以指定具体包或类的日志配置 -->
    <!-- name属性为必选，指定要配置的包或类，level和additivity为可选，有缺省值 -->
    <!-- level表示日志级别，这里配置info级别，表示info及以上级别的日志被输出 -->
    <!-- additivity表示日志是否传递到上一级，默认为true -->
    <logger name="com.example.logbackdemo.IndexAction" level="info" additivity="false">
        <appender-ref ref="CONSOLE"/>
    </logger>

</configuration>
